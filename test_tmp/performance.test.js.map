{"version":3,"file":"performance.test.js","names":["createRxDatabase","randomCouchString","overwritable","requestIdlePromise","assert","schemaObjects","schemas","isFastMode","isDeno","config","wait","describe","it","storage","init","strictEqual","isDevMode","timeout","runs","perfStorage","getPerformanceStorage","totalTimes","collectionsAmount","docsAmount","parallelQueryAmount","insertBatches","runsDone","_loop","console","log","time","performance","now","updateTime","flag","diff","push","awaitBetweenTest","db","name","eventReduce","multiInstance","collectionData","firstCollectionName","Array","fill","forEach","_v","idx","schema","averageSchema","statics","collections","addCollections","collection","insert","averageSchemaData","docIds","docsPerBatch","i","docsData","map","data","var1","var2","id","bulkInsert","idsResult","storageInstance","findDocumentsById","Object","keys","length","query","find","selector","sort","queryResult","exec","parallelResult","Promise","all","subQuery","parallelSum","r","countQuery","count","$eq","countQueryResult","ok","sum","doc","deep","deeper","deepNr","remove","timeToLog","description","platform","entries","key","times","roundToTwo","averageOfTimeValues","JSON","stringify","Deno","exit","striphighestXPercent","a","b","stripAmount","Math","floor","useNumbers","slice","total","nr","num","round"],"sources":["../test/performance.test.ts"],"sourcesContent":["import {\r\n    createRxDatabase,\r\n    randomCouchString,\r\n    overwritable,\r\n    requestIdlePromise\r\n} from '../plugins/core/index.mjs';\r\nimport * as assert from 'assert';\r\nimport {\r\n    schemaObjects,\r\n    schemas,\r\n    isFastMode,\r\n    isDeno\r\n} from '../plugins/test-utils/index.mjs';\r\nimport config from './unit/config.ts';\r\nimport { wait } from 'async-test-util';\r\ndeclare const Deno: any;\r\n\r\n/**\r\n * Runs some performance tests.\r\n * Mostly used to compare the performance of the different RxStorage implementations.\r\n * Run via 'npm run test:performance:memory:node' and change 'memory' for other storage names.\r\n */\r\ndescribe('performance.test.ts', () => {\r\n    it('init storage', async () => {\r\n        if (config.storage.init) {\r\n            await config.storage.init();\r\n        }\r\n    });\r\n    it('should not have enabled dev-mode which would affect the performance', () => {\r\n        assert.strictEqual(\r\n            overwritable.isDevMode(),\r\n            false\r\n        );\r\n    });\r\n    it('run the performance test', async function () {\r\n        this.timeout(200 * 1000);\r\n        const runs = isFastMode() ? 1 : 40;\r\n        const perfStorage = config.storage.getPerformanceStorage();\r\n\r\n        const totalTimes: { [k: string]: number[]; } = {};\r\n\r\n        const collectionsAmount = 4;\r\n        const docsAmount = 1200;\r\n        const parallelQueryAmount = 4;\r\n        const insertBatches = docsAmount / 200;\r\n\r\n        let runsDone = 0;\r\n        while (runsDone < runs) {\r\n            console.log('runsDone: ' + runsDone + ' of ' + runs);\r\n            runsDone++;\r\n\r\n            let time = performance.now();\r\n            const updateTime = (flag?: string) => {\r\n                if (!flag) {\r\n                    time = performance.now();\r\n                    return;\r\n                }\r\n                const diff = performance.now() - time;\r\n                if (!totalTimes[flag]) {\r\n                    totalTimes[flag] = [diff];\r\n                } else {\r\n                    totalTimes[flag].push(diff);\r\n                }\r\n                time = performance.now();\r\n            };\r\n\r\n            await awaitBetweenTest();\r\n            updateTime();\r\n\r\n            // create database\r\n            const db = await createRxDatabase({\r\n                name: 'test-db-performance-' + randomCouchString(10),\r\n                eventReduce: true,\r\n                /**\r\n                 * A RxStorage implementation (like LokiJS)\r\n                 * might need a full leader election cycle to be usable.\r\n                 * So we disable multiInstance here because it would make no sense\r\n                 * to measure the leader election time instead of the database\r\n                 * creation time.\r\n                 */\r\n                multiInstance: false,\r\n                storage: perfStorage.storage\r\n            });\r\n\r\n            // create collections\r\n            const collectionData: any = {};\r\n            let firstCollectionName: string = '';\r\n            new Array(collectionsAmount)\r\n                .fill(0)\r\n                .forEach((_v, idx) => {\r\n                    const name = randomCouchString(10) + '_' + idx;\r\n                    if (!firstCollectionName) {\r\n                        firstCollectionName = name;\r\n                    }\r\n                    collectionData[name] = {\r\n                        schema: schemas.averageSchema(),\r\n                        statics: {}\r\n                    };\r\n                });\r\n            const collections = await db.addCollections(collectionData);\r\n            const collection = collections[firstCollectionName];\r\n\r\n\r\n            /**\r\n             * Many storages have a lazy initialization.\r\n             * So it makes no sense to measure the time of database/collection creation.\r\n             * Insert we do a single insert an measure the time to the first insert.\r\n             */\r\n            await collection.insert(schemaObjects.averageSchemaData());\r\n            updateTime('time-to-first-insert');\r\n            await awaitBetweenTest();\r\n\r\n            // insert documents (in batches)\r\n            const docIds: string[] = [];\r\n            const docsPerBatch = docsAmount / insertBatches;\r\n            for (let i = 0; i < insertBatches; i++) {\r\n                const docsData = new Array(docsPerBatch)\r\n                    .fill(0)\r\n                    .map((_v, idx) => {\r\n                        const data = schemaObjects.averageSchemaData({\r\n                            var1: (idx % 2) + '',\r\n                            var2: idx % parallelQueryAmount\r\n                        });\r\n                        docIds.push(data.id);\r\n                        return data;\r\n                    });\r\n                updateTime();\r\n                await collection.bulkInsert(docsData);\r\n                updateTime('insert-documents-' + docsPerBatch);\r\n                await awaitBetweenTest();\r\n            }\r\n\r\n            /**\r\n             * Find by id,\r\n             * here we run the query against the storage because\r\n             * if we would do collection.findByIds(), it would\r\n             * just return the documents from the cache.\r\n             *\r\n             */\r\n            updateTime();\r\n            const idsResult = await collection.storageInstance.findDocumentsById(docIds, false);\r\n            updateTime('find-by-ids');\r\n            assert.strictEqual(Object.keys(idsResult).length, docsAmount);\r\n            await awaitBetweenTest();\r\n\r\n            // find by query\r\n            console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX START ' + performance.now());\r\n            updateTime();\r\n            const query = collection.find({\r\n                selector: {},\r\n                sort: [\r\n                    { var2: 'asc' },\r\n                    { var1: 'asc' }\r\n                ]\r\n            });\r\n            const queryResult = await query.exec();\r\n            updateTime('find-by-query');\r\n            console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX END ' + performance.now());\r\n            assert.strictEqual(queryResult.length, docsAmount + 1);\r\n            await awaitBetweenTest();\r\n\r\n            // find by multiple queries in parallel\r\n            updateTime();\r\n            const parallelResult = await Promise.all(\r\n                new Array(parallelQueryAmount).fill(0).map((_v, idx) => {\r\n                    const subQuery = collection.find({\r\n                        selector: {\r\n                            var2: idx\r\n                        }\r\n                    });\r\n                    return subQuery.exec();\r\n                })\r\n            );\r\n            updateTime('find-by-query-parallel-' + parallelQueryAmount);\r\n            let parallelSum = 0;\r\n            parallelResult.forEach(r => parallelSum = parallelSum + r.length);\r\n            assert.strictEqual(parallelSum, docsAmount);\r\n            await awaitBetweenTest();\r\n\r\n            // run count query\r\n            updateTime();\r\n            const countQuery = collection.count({\r\n                selector: {\r\n                    var1: {\r\n                        $eq: '1'\r\n                    }\r\n                }\r\n            });\r\n            const countQueryResult = await countQuery.exec();\r\n            updateTime('count');\r\n            assert.ok(countQueryResult >= (docsAmount / 2));\r\n            assert.ok(countQueryResult < (docsAmount * 0.8));\r\n            await awaitBetweenTest();\r\n\r\n            // test property access time\r\n            updateTime();\r\n            let sum = 0;\r\n            for (let i = 0; i < queryResult.length; i++) {\r\n                const doc = queryResult[i];\r\n\r\n                // access the same property exactly 2 times\r\n                sum += doc.deep.deeper.deepNr;\r\n                sum += doc.deep.deeper.deepNr;\r\n            }\r\n            updateTime('property-access');\r\n            assert.ok(sum > 10);\r\n\r\n\r\n            await db.remove();\r\n        }\r\n\r\n\r\n        const timeToLog: any = {\r\n            description: perfStorage.description,\r\n            platform: config.storage.name,\r\n            collectionsAmount,\r\n            docsAmount\r\n        };\r\n        Object.entries(totalTimes).forEach(([key, times]) => {\r\n            timeToLog[key] = roundToTwo(averageOfTimeValues(times, 95));\r\n        });\r\n\r\n        console.log('Performance test for ' + perfStorage.description);\r\n        console.log(JSON.stringify(timeToLog, null, 4));\r\n        // process.exit();\r\n    });\r\n    /**\r\n     * Some runtimes do not automatically exit for whatever reason.\r\n     */\r\n    it('exit the process', () => {\r\n        if (isDeno) {\r\n            Deno.exit(0);\r\n        }\r\n    });\r\n});\r\n\r\n\r\nexport function averageOfTimeValues(\r\n    times: number[],\r\n    /**\r\n     * To better account for anomalies\r\n     * during time measurements,\r\n     * we strip the highest x percent.\r\n     */\r\n    striphighestXPercent: number\r\n): number {\r\n    times = times.sort((a, b) => a - b);\r\n    const stripAmount = Math.floor(times.length * (striphighestXPercent * 0.01));\r\n    const useNumbers = times.slice(0, times.length - stripAmount);\r\n    let total = 0;\r\n    useNumbers.forEach(nr => total = total + nr);\r\n    return total / useNumbers.length;\r\n}\r\n\r\nfunction roundToTwo(num: number) {\r\n    return +(Math.round(num + 'e+2' as any) + 'e-2');\r\n}\r\n\r\nasync function awaitBetweenTest() {\r\n    await requestIdlePromise();\r\n    await wait(100);\r\n    await requestIdlePromise();\r\n    await requestIdlePromise();\r\n}\r\n"],"mappings":"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"}