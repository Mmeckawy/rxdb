{"version":3,"file":"replication-nats.test.js","names":["assert","config","randomCouchString","ensureNotFalsy","schemaObjects","humansCollection","ensureReplicationHasNoErrors","ensureCollectionsHaveEqualState","replicateNats","DeliverPolicy","JSONCodec","connect","wait","waitUntil","connectionSettings","servers","connectionStatePromise","jc","nc","jsm","jetstreamManager","js","jetstream","describe","ok","batchSize","getAllDocsOfServer","name","connectionState","streams","add","subjects","consumer","consumers","get","deliver_policy","LastPerSubject","messageResponse","fetch","signal","close","useMessages","m","push","json","ack","syncOnce","collection","natsName","options","replicationState","replicationIdentifier","streamName","subjectPrefix","connection","live","pull","awaitInitialReplication","syncNats","it","console","log","createHumanWithTimestamp","undefined","ret","Promise","race","then","database","destroy","docsOnServer","strictEqual","length","insert","humanWithTimestampData","awaitInSync","doc","findOne","exec","incrementalPatch","age","serverDoc","find","d","id","primary","getLatest","remove","_deleted","collectionA","collectionB","replicationStateA","replicationStateB","bulkInsert","Array","fill","map","all","c1","create","c2","doc1","doc2","firstName"],"sources":["../test/replication-nats.test.ts"],"sourcesContent":["import assert from 'assert';\r\nimport config from './unit/config.ts';\r\nimport {\r\n    randomCouchString,\r\n    RxCollection,\r\n    ensureNotFalsy,\r\n    WithDeleted\r\n} from '../plugins/core/index.mjs';\r\n\r\nimport {\r\n    schemaObjects,\r\n    humansCollection,\r\n    ensureReplicationHasNoErrors,\r\n    ensureCollectionsHaveEqualState,\r\n    HumanWithTimestampDocumentType\r\n} from '../plugins/test-utils/index.mjs';\r\n\r\nimport {\r\n    replicateNats,\r\n    NatsSyncOptions,\r\n    RxNatsReplicationState\r\n} from '../plugins/replication-nats/index.mjs';\r\nimport {\r\n    DeliverPolicy,\r\n    JSONCodec,\r\n    connect\r\n} from 'nats';\r\nimport { wait, waitUntil } from 'async-test-util';\r\n\r\n\r\nconst connectionSettings = { servers: 'localhost:4222' };\r\nconst connectionStatePromise = (async () => {\r\n    const jc = JSONCodec();\r\n    const nc = await connect(connectionSettings);\r\n    const jsm = await nc.jetstreamManager();\r\n    const js = nc.jetstream();\r\n    return {\r\n        jc,\r\n        nc,\r\n        jsm,\r\n        js\r\n    };\r\n})();\r\n\r\n/**\r\n * The tests for the NATS replication plugin\r\n * do not run in the normal test suite\r\n * because it is too slow to setup the NATS backend.\r\n */\r\ndescribe('replication-nats.test.js', () => {\r\n    assert.ok(config);\r\n    /**\r\n     * Use a low batchSize in all tests\r\n     * to make it easier to test boundaries.\r\n     */\r\n    const batchSize = 5;\r\n    type TestDocType = HumanWithTimestampDocumentType;\r\n    async function getAllDocsOfServer(\r\n        name: string\r\n    ): Promise<TestDocType[]> {\r\n        const connectionState = await connectionStatePromise;\r\n        await connectionState.jsm.streams.add({\r\n            name,\r\n            subjects: [\r\n                name + '.*'\r\n            ]\r\n        });\r\n        const consumer = await connectionState.js.consumers.get(name, {\r\n            deliver_policy: DeliverPolicy.LastPerSubject\r\n        });\r\n        const messageResponse = await consumer.fetch();\r\n        await (messageResponse as any).signal;\r\n        await messageResponse.close();\r\n        const useMessages: WithDeleted<TestDocType>[] = [];\r\n        for await (const m of messageResponse) {\r\n            useMessages.push(m.json());\r\n            m.ack();\r\n        }\r\n        return useMessages;\r\n    }\r\n\r\n    async function syncOnce(\r\n        collection: RxCollection,\r\n        natsName: string,\r\n        options?: Pick<NatsSyncOptions<any>, 'pull' | 'push'>\r\n    ) {\r\n        const replicationState = replicateNats({\r\n            collection,\r\n            replicationIdentifier: 'nats-once-' + natsName,\r\n            streamName: natsName,\r\n            subjectPrefix: natsName,\r\n            connection: connectionSettings,\r\n            live: false,\r\n            pull: options?.pull ?? {},\r\n            push: options?.push ?? {},\r\n        });\r\n        ensureReplicationHasNoErrors(replicationState);\r\n        await replicationState.awaitInitialReplication();\r\n    }\r\n    function syncNats<RxDocType = TestDocType>(\r\n        collection: RxCollection<RxDocType>,\r\n        natsName: string\r\n    ): RxNatsReplicationState<RxDocType> {\r\n        const replicationState = replicateNats<RxDocType>({\r\n            collection,\r\n            replicationIdentifier: 'nats-' + natsName,\r\n            streamName: natsName,\r\n            subjectPrefix: natsName,\r\n            connection: connectionSettings,\r\n            pull: {\r\n                batchSize\r\n            },\r\n            push: {\r\n                batchSize\r\n            }\r\n        });\r\n        ensureReplicationHasNoErrors(replicationState);\r\n        return replicationState;\r\n    }\r\n\r\n\r\n    describe('init', () => {\r\n        it('wait for server to be reachable', async () => {\r\n            await connectionStatePromise;\r\n            console.log('--');\r\n            await waitUntil(async () => {\r\n                const collection = await humansCollection.createHumanWithTimestamp(2, undefined, false);\r\n\r\n                const natsName = randomCouchString(10);\r\n\r\n                console.log('################ 0.1');\r\n\r\n                const replicationState = syncNats(collection, natsName);\r\n                ensureReplicationHasNoErrors(replicationState);\r\n                console.log('################ 0.2');\r\n                await replicationState.awaitInitialReplication();\r\n                console.log('################ 0.3');\r\n\r\n                const ret = await Promise.race([\r\n                    replicationState.awaitInitialReplication().then(() => true),\r\n                    wait(1000).then(() => false)\r\n                ]);\r\n                await collection.database.destroy();\r\n\r\n                console.log('ret: ' + ret);\r\n                return ret;\r\n\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('live replication', () => {\r\n        it('push replication to client-server', async () => {\r\n            const collection = await humansCollection.createHumanWithTimestamp(2, undefined, false);\r\n\r\n            const natsName = randomCouchString(10);\r\n\r\n            const replicationState = syncNats(collection, natsName);\r\n            ensureReplicationHasNoErrors(replicationState);\r\n            await replicationState.awaitInitialReplication();\r\n\r\n            let docsOnServer = await getAllDocsOfServer(natsName);\r\n            assert.strictEqual(docsOnServer.length, 2);\r\n\r\n            // insert another one\r\n            await collection.insert(schemaObjects.humanWithTimestampData());\r\n            await replicationState.awaitInSync();\r\n\r\n\r\n            docsOnServer = await getAllDocsOfServer(natsName);\r\n            assert.strictEqual(docsOnServer.length, 3);\r\n\r\n            // update one\r\n            const doc = await collection.findOne().exec(true);\r\n            await doc.incrementalPatch({ age: 100 });\r\n            await replicationState.awaitInSync();\r\n            docsOnServer = await getAllDocsOfServer(natsName);\r\n            assert.strictEqual(docsOnServer.length, 3);\r\n            const serverDoc = ensureNotFalsy(docsOnServer.find(d => d.id === doc.primary));\r\n            assert.strictEqual(serverDoc.age, 100);\r\n\r\n            // delete one\r\n            await doc.getLatest().remove();\r\n            await replicationState.awaitInSync();\r\n            docsOnServer = await getAllDocsOfServer(natsName);\r\n            // must still have 3 because there are no hard deletes\r\n            assert.strictEqual(docsOnServer.length, 3);\r\n            assert.ok(docsOnServer.find(d => (d as any)._deleted));\r\n\r\n            collection.database.destroy();\r\n        });\r\n        it('two collections', async () => {\r\n            const collectionA = await humansCollection.createHumanWithTimestamp(1, undefined, false);\r\n            const collectionB = await humansCollection.createHumanWithTimestamp(1, undefined, false);\r\n\r\n            const natsName = randomCouchString(10);\r\n            const replicationStateA = syncNats(collectionA, natsName);\r\n\r\n            ensureReplicationHasNoErrors(replicationStateA);\r\n            await replicationStateA.awaitInitialReplication();\r\n\r\n\r\n            const replicationStateB = syncNats(collectionB, natsName);\r\n            ensureReplicationHasNoErrors(replicationStateB);\r\n            await replicationStateB.awaitInitialReplication();\r\n\r\n            await replicationStateA.awaitInSync();\r\n\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // insert one\r\n            await collectionA.insert(schemaObjects.humanWithTimestampData({ id: 'insert', name: 'InsertName' }));\r\n            await replicationStateA.awaitInSync();\r\n\r\n            await replicationStateB.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // delete one\r\n            await collectionB.findOne().remove();\r\n            await replicationStateB.awaitInSync();\r\n            await replicationStateA.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // insert many\r\n            await collectionA.bulkInsert(\r\n                new Array(10)\r\n                    .fill(0)\r\n                    .map(() => schemaObjects.humanWithTimestampData({ name: 'insert-many' }))\r\n            );\r\n            await replicationStateA.awaitInSync();\r\n\r\n            await replicationStateB.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // insert at both collections at the same time\r\n            await Promise.all([\r\n                collectionA.insert(schemaObjects.humanWithTimestampData({ name: 'insert-parallel-A' })),\r\n                collectionB.insert(schemaObjects.humanWithTimestampData({ name: 'insert-parallel-B' }))\r\n            ]);\r\n            await replicationStateA.awaitInSync();\r\n            await replicationStateB.awaitInSync();\r\n            await replicationStateA.awaitInSync();\r\n            await replicationStateB.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            collectionA.database.destroy();\r\n            collectionB.database.destroy();\r\n        });\r\n    });\r\n    describe('conflict handling', () => {\r\n        it('should keep the master state as default conflict handler', async () => {\r\n            const natsName = randomCouchString(10);\r\n            const c1 = await humansCollection.create(1);\r\n            const c2 = await humansCollection.create(0);\r\n\r\n            await syncOnce(c1, natsName);\r\n            await syncOnce(c2, natsName);\r\n\r\n            const doc1 = await c1.findOne().exec(true);\r\n            const doc2 = await c2.findOne().exec(true);\r\n\r\n            // make update on both sides\r\n            await doc1.incrementalPatch({ firstName: 'c1' });\r\n            await doc2.incrementalPatch({ firstName: 'c2' });\r\n\r\n            await syncOnce(c2, natsName);\r\n\r\n            // cause conflict\r\n            await syncOnce(c1, natsName);\r\n\r\n            /**\r\n             * Must have kept the master state c2\r\n             */\r\n            assert.strictEqual(doc1.getLatest().firstName, 'c2');\r\n\r\n            c1.database.destroy();\r\n            c2.database.destroy();\r\n        });\r\n    });\r\n});\r\n"],"mappings":"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"}