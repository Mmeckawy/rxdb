{"version":3,"file":"typings.test.js","names":["assert","schemas","createRxDatabase","addRxPlugin","createBlob","getRxStorageMemory","describe","it","x","ok","databaseCreator","name","storage","multiInstance","ignoreDuplicate","myDb","destroy","db","col","foobar","hero","foo","foobar2","schema","humanMinimal","minimalHuman","myCollections","addCollections","humans","humanCompositePrimaryTyped","humanCompositePrimarySchemaLiteral","humanMinimalBroken","mySchema","human","cols","autoMigrate","statics","countAllDocuments","Promise","resolve","myCollection","options","foo1","foo2","y","names","revs","sub1","insert$","subscribe","cE","push","documentData","firstName","_rev","result","findOne","exec","Error","oneDoc","id","passportId","prim","primary","otherResult","otherDoc","id2","attachment","putAttachment","data","type","rev","toJSON","collection","doc","incrementalModify","docData","newData","age","lastName","typedLocalDoc","getLocal","typedLocalDocInsert","insertLocal","bar","typedLocalDocUpsert","upsertLocal","get","x2","_data","methods","insert","doc2","myNumber","myString","postInsert","query","where","eq","err","rxdb","parameters","errors","myPlugin","prototypes","RxDocument","heroSchema","version","primaryKey","properties","required","colCreator","find","selector","$exists","timestamp","$gt","limit","sort"],"sources":["../test/typings.test.ts"],"sourcesContent":["/// <reference path=\"../node_modules/@types/mocha/index.d.ts\" />\r\n/// <reference path=\"../node_modules/@types/assert/index.d.ts\" />\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/**\r\n * this checks if typings work as expected\r\n */\r\nimport * as assert from 'assert';\r\nimport {\r\n    HumanCompositePrimaryDocType,\r\n    schemas\r\n} from '../plugins/test-utils/index.mjs';\r\nimport {\r\n    createRxDatabase,\r\n    RxDatabase,\r\n    RxDatabaseCreator,\r\n    RxCollection,\r\n    RxCollectionCreator,\r\n    RxDocument,\r\n    RxJsonSchema,\r\n    RxError,\r\n    RxAttachment,\r\n    RxPlugin,\r\n    addRxPlugin,\r\n    createBlob\r\n} from '../plugins/core/index.mjs';\r\nimport { getRxStorageMemory } from '../plugins/storage-memory/index.mjs';\r\n\r\ntype DefaultDocType = {\r\n    passportId: string;\r\n    age: number;\r\n    oneOptional?: string;\r\n};\r\ntype DefaultOrmMethods = {\r\n    foobar(): string;\r\n};\r\n\r\ndescribe('typings.test.js', function () {\r\n\r\n    describe('basic', () => {\r\n        it('should fail on broken code', () => {\r\n            let x: string = 'foo';\r\n            // @ts-expect-error not a string\r\n            x = 1337;\r\n            assert.ok(x);\r\n        });\r\n    });\r\n    describe('database', () => {\r\n        describe('positive', () => {\r\n            it('should create the database and use its methods', async () => {\r\n                const databaseCreator: RxDatabaseCreator = {\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false\r\n                };\r\n                const myDb: RxDatabase = await createRxDatabase(databaseCreator);\r\n                await myDb.destroy();\r\n            });\r\n            it('allow to type-define the collections', () => {\r\n                const db: RxDatabase<{\r\n                    foobar: RxCollection;\r\n                }> = {} as RxDatabase<{\r\n                    foobar: RxCollection;\r\n                }>;\r\n                const col: RxCollection = db.foobar;\r\n            });\r\n            it('a collection-untyped database should allow all collection-getters', () => {\r\n                const db: RxDatabase = {} as RxDatabase;\r\n                const col: RxCollection = db.foobar;\r\n            });\r\n            it('an collection-TYPED database should allow to access methods', () => {\r\n                const db: RxDatabase = {} as RxDatabase;\r\n                const col: RxCollection = db.foobar;\r\n            });\r\n            it('an allow to use a custom extends type', async () => {\r\n                type RxHeroesDatabase = RxDatabase<{\r\n                    hero: RxCollection;\r\n                }>;\r\n                const db: RxHeroesDatabase = await createRxDatabase<{\r\n                    hero: RxCollection;\r\n                }>({\r\n                    name: 'heroes',\r\n                    storage: getRxStorageMemory()\r\n                });\r\n                const col: RxCollection = db.hero;\r\n                await db.destroy();\r\n            });\r\n        });\r\n        describe('negative', () => {\r\n            it('should not allow additional parameters', () => {\r\n                const databaseCreator: RxDatabaseCreator = {\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false,\r\n                    // @ts-expect-error foo param does not exist\r\n                    foo: 'bar'\r\n                };\r\n                assert.ok(databaseCreator);\r\n            });\r\n            it('an collection-TYPED database should only allow known collection-getters', () => {\r\n                const db: RxDatabase<{\r\n                    foobar: RxCollection;\r\n                }> = {} as any;\r\n                const col: RxCollection = db.foobar;\r\n\r\n                // @ts-expect-error foobar2 does not exist\r\n                assert.ok(!db.foobar2);\r\n            });\r\n\r\n        });\r\n    });\r\n\r\n    describe('schema', () => {\r\n        describe('positive', () => {\r\n            it('should work with DocType = any', () => {\r\n                const schema: RxJsonSchema<any> = schemas.humanMinimal;\r\n                assert.ok(schema);\r\n            });\r\n            it('should allow creating generic schema based on a model', async () => {\r\n                const databaseCreator: RxDatabaseCreator = {\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false\r\n                };\r\n                const myDb: RxDatabase = await createRxDatabase(databaseCreator);\r\n                const minimalHuman: RxJsonSchema<DefaultDocType> = schemas.humanMinimal;\r\n                const myCollections = await myDb.addCollections({\r\n                    humans: {\r\n                        schema: minimalHuman,\r\n                    }\r\n                });\r\n                await myDb.destroy();\r\n            });\r\n            it('should allow \\'as const\\' composite primary schemas to work', () => {\r\n                const humanCompositePrimaryTyped: RxJsonSchema<HumanCompositePrimaryDocType> = schemas.humanCompositePrimarySchemaLiteral;\r\n            });\r\n        });\r\n        describe('negative', () => {\r\n            it('should not allow wrong properties when passing a model', async () => {\r\n                const databaseCreator: RxDatabaseCreator = {\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false\r\n                };\r\n                const myDb: RxDatabase = await createRxDatabase(databaseCreator);\r\n\r\n                // @ts-expect-error broken schema\r\n                const minimalHuman: RxJsonSchema<DefaultDocType> = schemas.humanMinimalBroken;\r\n                await myDb.destroy();\r\n            });\r\n\r\n        });\r\n    });\r\n\r\n    describe('collection', () => {\r\n        describe('positive', () => {\r\n            it('collection-creation', async () => {\r\n                const myDb: RxDatabase = await createRxDatabase({\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false\r\n                });\r\n                const mySchema: RxJsonSchema<any> = schemas.human;\r\n                const cols = await myDb.addCollections({\r\n                    humans: {\r\n                        schema: mySchema,\r\n                        autoMigrate: false,\r\n                    }\r\n                });\r\n                const myCollections: RxCollection<any> = cols.humans;\r\n            });\r\n            it('typed collection should know its static orm methods', async () => {\r\n                const myDb: RxDatabase = await createRxDatabase({\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false\r\n                });\r\n                const mySchema: RxJsonSchema<any> = schemas.human;\r\n                type staticMethods = {\r\n                    countAllDocuments: () => Promise<number>;\r\n                };\r\n                const myCollections = await myDb.addCollections({\r\n                    humans: {\r\n                        schema: mySchema,\r\n                        autoMigrate: false,\r\n                        statics: {\r\n                            countAllDocuments: () => Promise.resolve(1)\r\n                        }\r\n                    }\r\n                });\r\n                const myCollection: RxCollection<any, any, staticMethods> = myCollections.humans as any;\r\n                await myCollection.countAllDocuments();\r\n            });\r\n            it('use options', async () => {\r\n                const myDb: RxDatabase = await createRxDatabase({\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false,\r\n                    options: {\r\n                        foo1: 'bar1'\r\n                    }\r\n                });\r\n                const mySchema: RxJsonSchema<any> = schemas.human;\r\n                const myCollections = await myDb.addCollections({\r\n                    humans: {\r\n                        schema: mySchema,\r\n                        autoMigrate: false,\r\n                        options: {\r\n                            foo2: 'bar2'\r\n                        }\r\n                    }\r\n                });\r\n                const x: string = myDb.options.foo1;\r\n                const y: string = myCollections.humans.options.foo2;\r\n                myDb.destroy();\r\n            });\r\n        });\r\n        describe('negative', () => {\r\n            it('should not allow wrong collection-settings', async () => {\r\n                const myDb: RxDatabase = await createRxDatabase({\r\n                    name: 'mydb',\r\n                    storage: getRxStorageMemory(),\r\n                    multiInstance: false,\r\n                    ignoreDuplicate: false\r\n                });\r\n                await myDb.addCollections({\r\n                    humans: {\r\n                        // @ts-expect-error because of wrong schema format\r\n                        schema: {},\r\n                        autoMigrate: false,\r\n                    }\r\n                });\r\n                await myDb.destroy();\r\n            });\r\n        });\r\n    });\r\n    describe('change-event', () => {\r\n        it('.insert$ .update$ .remove$', async () => {\r\n            const myDb: RxDatabase = await createRxDatabase({\r\n                name: 'mydb',\r\n                storage: getRxStorageMemory(),\r\n                multiInstance: false,\r\n                ignoreDuplicate: false\r\n            });\r\n            type docType = {\r\n                firstName: string;\r\n                lastName: string;\r\n            };\r\n            const mySchema: RxJsonSchema<any> = schemas.human;\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: mySchema,\r\n                    autoMigrate: false,\r\n                }\r\n            });\r\n\r\n            const names: string[] = [];\r\n            const revs: string[] = [];\r\n            const sub1 = myCollections.humans.insert$.subscribe(cE => {\r\n                names.push(cE.documentData.firstName);\r\n                revs.push(cE.documentData._rev);\r\n            });\r\n        });\r\n    });\r\n    describe('document', () => {\r\n        it('should know the fields of the document', async () => {\r\n            const myDb: any = {};\r\n            type DocType = {\r\n                age: number;\r\n                firstName: string;\r\n                lastName: string;\r\n                passportId: string;\r\n            };\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {},\r\n                    autoMigrate: false,\r\n                }\r\n            });\r\n\r\n            const result = await myCollections.humans.findOne().exec();\r\n            if (result === null) throw new Error('got no document');\r\n            const oneDoc: RxDocument<DocType> = result;\r\n            const id: string = oneDoc.passportId;\r\n            const prim: string = oneDoc.primary;\r\n\r\n            const otherResult = await myCollections.humans.findOne().exec();\r\n            if (otherResult === null) throw new Error('got no other document');\r\n            const otherDoc: RxDocument<DocType> = otherResult;\r\n            const id2 = otherDoc.passportId;\r\n        });\r\n        it('.putAttachment()', async () => {\r\n            const myDb: any = {};\r\n\r\n            type DocType = {\r\n                age: number;\r\n                firstName: string;\r\n                lastName: string;\r\n                passportId: string;\r\n            };\r\n\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {},\r\n                    autoMigrate: false,\r\n                }\r\n            });\r\n\r\n            const result = await myCollections.humans.findOne().exec(true);\r\n            const oneDoc: RxDocument<DocType> = result;\r\n            const attachment: RxAttachment<DocType> = await oneDoc.putAttachment({\r\n                id: 'cat.txt',\r\n                data: createBlob('foo bar', 'text/plain'),\r\n                type: 'text/plain'\r\n            });\r\n        });\r\n        it('.toJSON() should have _rev', async () => {\r\n            const myDb: any = {};\r\n\r\n            type DocType = {\r\n                age: number;\r\n                firstName: string;\r\n                lastName: string;\r\n                passportId: string;\r\n            };\r\n\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {},\r\n                    autoMigrate: false,\r\n                }\r\n            });\r\n\r\n            const result = await myCollections.humans.findOne().exec(true);\r\n            const rev: string = result.toJSON(true)._rev;\r\n        });\r\n        it('.toJSON(false) should not have _rev', async () => {\r\n            const myDb: any = {};\r\n\r\n            type DocType = {\r\n                age: number;\r\n                firstName: string;\r\n                lastName: string;\r\n                passportId: string;\r\n            };\r\n\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {},\r\n                    autoMigrate: false,\r\n                }\r\n            });\r\n            const collection: RxCollection<{}> = myCollections.humans;\r\n\r\n            const result = await collection.findOne().exec(true);\r\n\r\n            // @ts-expect-error must not have _rev\r\n            const rev: string = result.toJSON(false)._rev;\r\n        });\r\n        it('.incrementalModify()', async () => {\r\n            const myDb: any = {};\r\n            type DocType = {\r\n                age: number;\r\n                firstName: string;\r\n                lastName: string;\r\n                passportId: string;\r\n            };\r\n\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {},\r\n                    autoMigrate: false,\r\n                }\r\n            });\r\n            const collection: RxCollection<DocType> = myCollections.humans;\r\n            const doc = await collection.findOne().exec(true);\r\n            await doc.incrementalModify(docData => {\r\n                const newData = {\r\n                    age: 23,\r\n                    firstName: 'bar',\r\n                    lastName: 'steve',\r\n                    passportId: 'lolol'\r\n                };\r\n                return newData;\r\n            });\r\n        });\r\n    });\r\n});\r\ndescribe('local documents', () => {\r\n    it('should allow to type input data', async () => {\r\n        const myDb: RxDatabase = {} as any;\r\n        const typedLocalDoc = await myDb.getLocal<{ foo: string; }>('foobar');\r\n\r\n        // @ts-expect-error does not have 'bar'\r\n        const typedLocalDocInsert = await myDb.insertLocal<{ foo: string; }>('foobar', { bar: 'foo' });\r\n\r\n        if (!typedLocalDoc) {\r\n            throw new Error('local doc missing');\r\n        }\r\n    });\r\n    it('should allow to type the return data', async () => {\r\n        const myDb: RxDatabase = {} as any;\r\n        const typedLocalDoc = await myDb.getLocal<{ foo: string; }>('foobar');\r\n        const typedLocalDocUpsert = await myDb.upsertLocal<{ foo: string; }>('foobar', { foo: 'bar' });\r\n\r\n        if (!typedLocalDoc) {\r\n            throw new Error('local doc missing');\r\n        }\r\n\r\n        const x: string = typedLocalDoc.get('data').foo;\r\n        const x2: string = typedLocalDocUpsert.get('data').foo;\r\n    });\r\n    it('should allow to access different property', async () => {\r\n        const myDb: RxDatabase = {} as any;\r\n        const typedLocalDoc = await myDb.getLocal<{ foo: string; }>('foobar');\r\n        if (typedLocalDoc) {\r\n            // @ts-expect-error must not have 'bar'\r\n            const x: string = typedLocalDoc._data.bar;\r\n        }\r\n    });\r\n});\r\ndescribe('other', () => {\r\n    describe('orm', () => {\r\n        it('should correctly recognize orm-methods', async () => {\r\n            const myDb: any = {};\r\n\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {},\r\n                    methods: {\r\n                        foobar() {\r\n                            return 'foobar';\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            const myCollection: RxCollection<DefaultDocType, DefaultOrmMethods, {}> = myCollections.humans;\r\n\r\n            // via insert\r\n            const doc = await myCollection.insert({\r\n                passportId: 'asdf',\r\n                age: 10\r\n            });\r\n            const x: string = doc.foobar();\r\n\r\n            // via query findOne()\r\n            const doc2 = await myCollection.findOne('asdf').exec(true);\r\n            const x2: string = doc.foobar();\r\n        });\r\n    });\r\n    describe('hooks', () => {\r\n        it('should know the types', async () => {\r\n            const myDb: any = {};\r\n            const myCollections = await myDb.addCollections({\r\n                humans: {\r\n                    schema: {}\r\n                }\r\n            });\r\n            const myCollection: RxCollection<DefaultDocType, DefaultOrmMethods> = myCollections.humans;\r\n            let myNumber: number;\r\n            let myString: string;\r\n            myCollection.postInsert((data, doc) => {\r\n                myNumber = doc.age;\r\n                myNumber = data.age;\r\n                myString = doc.foobar();\r\n                return Promise.resolve();\r\n            }, true);\r\n        });\r\n        describe('query', () => {\r\n            it('should know the where-fields', async () => {\r\n                const myDb: any = {};\r\n\r\n                type DocType = {\r\n                    age: number;\r\n                    firstName: string;\r\n                    lastName: string;\r\n                    passportId: string;\r\n                    nestedObject: {\r\n                        foo: string;\r\n                        bar: number;\r\n                    };\r\n                };\r\n\r\n                const myCollections = await myDb.addCollections({\r\n                    humans: {\r\n                        schema: {},\r\n                        autoMigrate: false,\r\n                    }\r\n                });\r\n                const myCollection: RxCollection<DocType> = myCollections.humans;\r\n\r\n                const query = myCollection.findOne().where('nestedObject.foo').eq('foobar');\r\n            });\r\n            describe('rx-error', () => {\r\n                it('should know the parameters of the error', async () => {\r\n                    const myDb: any = {};\r\n                    const myCollections = await myDb.addCollections({\r\n                        humans: {\r\n                            schema: {},\r\n                            autoMigrate: false,\r\n                        }\r\n                    });\r\n\r\n                    try {\r\n                        await myCollections.humans.insert({ age: 4 });\r\n                    } catch (err) {\r\n                        if ((err as any).rxdb) {\r\n                            assert.ok((err as RxError).parameters.errors);\r\n                        } else {\r\n                            // handle regular Error class\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            describe('addRxPlugin', () => {\r\n                it('should be a valid RxPlugin', () => {\r\n                    const myPlugin: RxPlugin = {\r\n                        name: 'my-plugin',\r\n                        rxdb: true,\r\n                        prototypes: {\r\n                            RxDocument: () => { }\r\n                        }\r\n                    };\r\n                    addRxPlugin(myPlugin);\r\n                });\r\n            });\r\n            describe('issues', () => {\r\n                it('via gitter at 2018 Mai 22 19:20', () => {\r\n                    const db: RxDatabase = {} as RxDatabase;\r\n                    const heroSchema = {\r\n                        version: 0,\r\n                        type: 'object',\r\n                        primaryKey: 'id',\r\n                        properties: {\r\n                            id: {\r\n                                type: 'string'\r\n                            }\r\n                        },\r\n                        required: ['color']\r\n                    };\r\n                    const colCreator: RxCollectionCreator = {\r\n                        schema: heroSchema\r\n                    };\r\n                });\r\n                it('nested selector type not working', () => {\r\n                    type DocType = {\r\n                        id?: string;\r\n                        timestamp: number;\r\n                        meta: {\r\n                            user: string;\r\n                        };\r\n                    };\r\n                    type RxCollectionIssue = RxCollection<DocType>;\r\n                    const collection: RxCollectionIssue = {} as any;\r\n                    const query = collection.find({\r\n                        selector: {\r\n                            'meta.user': 'foobar',\r\n                            id: {\r\n                                $exists: true\r\n                            },\r\n                            timestamp: {\r\n                                $exists: true,\r\n                                $gt: 1000\r\n                            }\r\n                        },\r\n                        limit: 10,\r\n                        sort: [\r\n                            { id: 'asc' },\r\n                            { timestamp: 'asc' }\r\n                        ]\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"mappings":"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"}