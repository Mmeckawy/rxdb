{"version":3,"file":"replication-couchdb.test.js","names":["assert","config","schemaObjects","humansCollection","ENV_VARIABLES","ensureCollectionsHaveEqualState","isNode","addRxPlugin","randomCouchString","mergeUrlQueryParams","replicateCouchDB","getFetchWithCouchDBAuthorization","RxDBUpdatePlugin","filter","firstValueFrom","waitUntil","fetchWithCouchDBAuth","NATIVE_COUCHDB","fetch","SpawnServer","describe","storage","hasPersistence","console","log","getAllServerDocs","serverUrl","url","include_docs","response","result","json","rows","map","row","doc","ensureReplicationHasNoErrors","replicationState","error$","subscribe","err","error","parameters","errors","syncOnce","collection","server","replicationIdentifier","live","pull","push","awaitInitialReplication","syncAll","c1","c2","it","timeout","spawn","undefined","c","create","database","destroy","close","insert","humanData","serverDocs","strictEqual","length","_id","find","exec","findOne","incrementalPatch","firstName","doc1","doc2","getLatest","remove","syncLive","replicationState1","replicationState2","awaitInSync","Promise","all","then","foundPromise","$","pipe","results","serverDocsInner","endResult","passportId","age","lastName","batchSize","heartbeat","update","$set","ok","bulkInsert"],"sources":["../test/replication-couchdb.test.ts"],"sourcesContent":["import assert from 'assert';\r\nimport config from './unit/config.ts';\r\n\r\nimport {\r\n    schemaObjects,\r\n    humansCollection,\r\n    ENV_VARIABLES,\r\n    ensureCollectionsHaveEqualState,\r\n    isNode\r\n} from '../plugins/test-utils/index.mjs';\r\n\r\nimport {\r\n    addRxPlugin,\r\n    randomCouchString,\r\n    RxCollection\r\n} from './../plugins/core/index.mjs';\r\n\r\nimport {\r\n    mergeUrlQueryParams,\r\n    RxCouchDBReplicationState,\r\n    replicateCouchDB,\r\n    getFetchWithCouchDBAuthorization\r\n} from './../plugins/replication-couchdb/index.mjs';\r\n\r\nimport { RxDBUpdatePlugin } from './../plugins/update/index.mjs';\r\naddRxPlugin(RxDBUpdatePlugin);\r\n\r\nimport { CouchAllDocsResponse } from './../plugins/core/index.mjs';\r\nimport { filter, firstValueFrom } from 'rxjs';\r\nimport { waitUntil } from 'async-test-util';\r\nconst fetchWithCouchDBAuth = ENV_VARIABLES.NATIVE_COUCHDB ? getFetchWithCouchDBAuthorization('root', 'root') : fetch;\r\nimport * as SpawnServer from './helper/spawn-server.ts';\r\n\r\ndescribe('replication-couchdb.test.ts', () => {\r\n    if (\r\n        !isNode ||\r\n        !config.storage.hasPersistence\r\n    ) {\r\n        return;\r\n    }\r\n    console.log('SPAWN COUCH SERVER');\r\n\r\n    async function getAllServerDocs(serverUrl: string): Promise<any[]> {\r\n        const url = serverUrl + '_all_docs?' + mergeUrlQueryParams({ include_docs: true });\r\n        const response = await fetchWithCouchDBAuth(url);\r\n        const result: CouchAllDocsResponse = await response.json();\r\n        return result.rows.map(row => row.doc);\r\n    }\r\n\r\n    function ensureReplicationHasNoErrors(replicationState: RxCouchDBReplicationState<any>) {\r\n        /**\r\n         * We do not have to unsubscribe because the observable will cancel anyway.\r\n         */\r\n        replicationState.error$.subscribe(err => {\r\n            console.error('ensureReplicationHasNoErrors() has error:');\r\n            console.log(err);\r\n            if (err?.parameters?.errors) {\r\n                throw err.parameters.errors[0];\r\n            }\r\n            throw err;\r\n        });\r\n    }\r\n\r\n    async function syncOnce(collection: RxCollection, server: {\r\n        dbName: string;\r\n        url: string;\r\n        close: () => Promise<void>;\r\n    }) {\r\n        const replicationState = replicateCouchDB({\r\n            replicationIdentifier: 'sync-once' + server.url,\r\n            collection,\r\n            url: server.url,\r\n            fetch: fetchWithCouchDBAuth,\r\n            live: false,\r\n            pull: {},\r\n            push: {}\r\n        });\r\n        ensureReplicationHasNoErrors(replicationState);\r\n        await replicationState.awaitInitialReplication();\r\n    }\r\n    async function syncAll<RxDocType>(\r\n        c1: RxCollection<RxDocType>,\r\n        c2: RxCollection<RxDocType>,\r\n        server: any\r\n    ) {\r\n        await syncOnce(c1, server);\r\n        await syncOnce(c2, server);\r\n        await syncOnce(c1, server);\r\n    }\r\n\r\n    describe('init', () => {\r\n        it('import server module', async () => {\r\n        });\r\n        it('wait until CouchDB server is reachable', async function () {\r\n            this.timeout(500 * 1000);\r\n            if (!ENV_VARIABLES.NATIVE_COUCHDB) {\r\n                return;\r\n            }\r\n            await waitUntil(async () => {\r\n                try {\r\n                    await SpawnServer.spawn();\r\n                    console.log('# could reach CouchDB server!');\r\n                    return true;\r\n                } catch (err) {\r\n                    console.log('# could NOT reach CouchDB server, will retry.');\r\n                    return false;\r\n                }\r\n            }, undefined, 500);\r\n        });\r\n    });\r\n\r\n    describe('live:false', () => {\r\n        it('finish sync once without data', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const c = await humansCollection.create(0);\r\n            await syncOnce(c, server);\r\n            c.database.destroy();\r\n            server.close();\r\n        });\r\n        it('push one insert to server', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const c = await humansCollection.create(0);\r\n            await c.insert(schemaObjects.humanData('foobar'));\r\n            await syncOnce(c, server);\r\n\r\n            const serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 1);\r\n            assert.strictEqual(serverDocs[0]._id, 'foobar');\r\n\r\n            c.database.destroy();\r\n            server.close();\r\n        });\r\n        it('push and pull inserted document', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const c = await humansCollection.create(0);\r\n            const c2 = await humansCollection.create(0);\r\n\r\n            // insert on both sides\r\n            await c.insert(schemaObjects.humanData());\r\n            await c2.insert(schemaObjects.humanData());\r\n\r\n            await syncOnce(c, server);\r\n            await syncOnce(c2, server);\r\n            await syncOnce(c, server);\r\n\r\n            const serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 2);\r\n\r\n            assert.strictEqual((await c.find().exec()).length, 2);\r\n            await ensureCollectionsHaveEqualState(c, c2);\r\n\r\n            // pulling again should not crash\r\n            await syncOnce(c2, server);\r\n            await ensureCollectionsHaveEqualState(c, c2);\r\n\r\n            c.database.destroy();\r\n            c2.database.destroy();\r\n            server.close();\r\n        });\r\n        it('update existing document', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const c = await humansCollection.create(0);\r\n\r\n            const c2 = await humansCollection.create(0);\r\n            await c2.insert(schemaObjects.humanData());\r\n            await syncOnce(c2, server);\r\n\r\n            let serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 1);\r\n\r\n            await syncOnce(c, server);\r\n\r\n            const doc = await c.findOne().exec(true);\r\n            await doc.incrementalPatch({ firstName: 'foobar' });\r\n            await syncOnce(c, server);\r\n\r\n            serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs[0].firstName, 'foobar');\r\n\r\n            // pulling again should not crash\r\n            await syncOnce(c2, server);\r\n            await ensureCollectionsHaveEqualState(c, c2);\r\n\r\n            c.database.destroy();\r\n            c2.database.destroy();\r\n            server.close();\r\n        });\r\n        it('delete documents', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const c = await humansCollection.create(0, 'col1', false);\r\n            const c2 = await humansCollection.create(0, 'col2', false);\r\n\r\n            const doc1 = await c.insert(schemaObjects.humanData('doc1'));\r\n            const doc2 = await c2.insert(schemaObjects.humanData('doc2'));\r\n\r\n            await syncAll(c, c2, server);\r\n            await ensureCollectionsHaveEqualState(c, c2);\r\n            let serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 2);\r\n\r\n            await doc1.getLatest().remove();\r\n            await syncAll(c, c2, server);\r\n            serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 1);\r\n\r\n            await ensureCollectionsHaveEqualState(c, c2);\r\n\r\n            await doc2.getLatest().remove();\r\n            await syncAll(c, c2, server);\r\n            serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 0);\r\n            await ensureCollectionsHaveEqualState(c, c2);\r\n\r\n            c.database.destroy();\r\n            c2.database.destroy();\r\n            server.close();\r\n        });\r\n        describe('conflict handling', () => {\r\n            it('should keep the master state as default conflict handler', async () => {\r\n                const server = await SpawnServer.spawn();\r\n                const c1 = await humansCollection.create(1);\r\n                const c2 = await humansCollection.create(0);\r\n\r\n                await syncAll(c1, c2, server);\r\n\r\n                const doc1 = await c1.findOne().exec(true);\r\n                const doc2 = await c2.findOne().exec(true);\r\n\r\n                // make update on both sides\r\n                await doc1.incrementalPatch({ firstName: 'c1' });\r\n                await doc2.incrementalPatch({ firstName: 'c2' });\r\n\r\n                await syncOnce(c2, server);\r\n\r\n                // cause conflict\r\n                await syncOnce(c1, server);\r\n\r\n                /**\r\n                 * Must have kept the master state c2\r\n                 */\r\n                assert.strictEqual(doc1.getLatest().firstName, 'c2');\r\n\r\n                c1.database.destroy();\r\n                c2.database.destroy();\r\n                server.close();\r\n            });\r\n        });\r\n    });\r\n    describe('live:true', () => {\r\n        async function syncLive<RxDocType>(\r\n            collection: RxCollection<RxDocType>,\r\n            server: any\r\n        ): Promise<RxCouchDBReplicationState<RxDocType>> {\r\n            const replicationState = replicateCouchDB<RxDocType>({\r\n                replicationIdentifier: randomCouchString(10),\r\n                collection,\r\n                url: server.url,\r\n                fetch: fetchWithCouchDBAuth,\r\n                live: true,\r\n                pull: {},\r\n                push: {}\r\n            });\r\n            ensureReplicationHasNoErrors(replicationState);\r\n            await replicationState.awaitInitialReplication();\r\n            return replicationState;\r\n        }\r\n\r\n        it('should stream changes over the replication to a query', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const c1 = await humansCollection.create(0);\r\n            const c2 = await humansCollection.create(0);\r\n\r\n            const replicationState1 = await syncLive(c1, server);\r\n            ensureReplicationHasNoErrors(replicationState1);\r\n            const replicationState2 = await syncLive(c2, server);\r\n            ensureReplicationHasNoErrors(replicationState2);\r\n\r\n            const awaitInSync = () => Promise.all([\r\n                replicationState1.awaitInSync(),\r\n                replicationState2.awaitInSync()\r\n            ]).then(() => Promise.all([\r\n                replicationState1.awaitInSync(),\r\n                replicationState2.awaitInSync()\r\n            ]));\r\n\r\n            const foundPromise = firstValueFrom(\r\n                c2.find().$.pipe(\r\n                    filter(results => results.length === 1)\r\n                )\r\n            );\r\n\r\n            await c1.insert(schemaObjects.humanData('foobar'));\r\n            await awaitInSync();\r\n\r\n            // wait until it is on the server\r\n            await waitUntil(async () => {\r\n                const serverDocsInner = await getAllServerDocs(server.url);\r\n                return serverDocsInner.length === 1;\r\n            });\r\n\r\n            const endResult = await foundPromise;\r\n            assert.strictEqual(endResult[0].passportId, 'foobar');\r\n\r\n            const doc1 = await c1.findOne().exec(true);\r\n            const doc2 = await c2.findOne().exec(true);\r\n\r\n            // edit on one side\r\n            await doc1.incrementalPatch({ age: 20 });\r\n            await awaitInSync();\r\n            await waitUntil(() => doc2.getLatest().age === 20);\r\n\r\n            // edit on one side again\r\n            await doc1.incrementalPatch({ age: 21 });\r\n            await awaitInSync();\r\n            await waitUntil(() => doc2.getLatest().age === 21);\r\n\r\n            // edit on other side\r\n            await doc2.incrementalPatch({ age: 22 });\r\n            await awaitInSync();\r\n            await waitUntil(() => doc1.getLatest().age === 22);\r\n\r\n            c1.database.destroy();\r\n            c2.database.destroy();\r\n            server.close();\r\n        });\r\n    });\r\n    describe('ISSUES', () => {\r\n        it('#4299 CouchDB push is throwing error because of missing revision', async () => {\r\n            const server = await SpawnServer.spawn();\r\n\r\n            // create a collection\r\n            const collection = await humansCollection.create(0);\r\n\r\n            // insert a document\r\n            let doc = await collection.insert({\r\n                passportId: 'foobar',\r\n                firstName: 'Bob',\r\n                lastName: 'Kelso',\r\n                age: 56,\r\n            });\r\n\r\n            const replicationState = replicateCouchDB({\r\n                replicationIdentifier: randomCouchString(10),\r\n                url: server.url,\r\n                collection,\r\n                fetch: fetchWithCouchDBAuth,\r\n                live: true,\r\n                pull: {\r\n                    batchSize: 60,\r\n                    heartbeat: 60000,\r\n                },\r\n                push: {\r\n                    batchSize: 60,\r\n                },\r\n            });\r\n            ensureReplicationHasNoErrors(replicationState);\r\n\r\n            await replicationState.awaitInitialReplication();\r\n\r\n            // Edit the item multiple times\r\n            // In this test the replication usually fails on the first edit\r\n            // But in production it is pretty random, I've added 3 edits just in case\r\n            doc = await doc.update({\r\n                $set: {\r\n                    firstName: '1' + randomCouchString(10),\r\n                },\r\n            });\r\n\r\n            doc = await doc.update({\r\n                $set: {\r\n                    firstName: '2' + randomCouchString(10),\r\n                },\r\n            });\r\n\r\n            doc = await doc.update({\r\n                $set: {\r\n                    firstName: '3' + randomCouchString(10),\r\n                },\r\n            });\r\n            assert.ok(doc);\r\n\r\n            await replicationState.awaitInSync();\r\n            await collection.database.destroy();\r\n        });\r\n        it('#4319 CouchDB Replication fails on deleted documents', async () => {\r\n            const server = await SpawnServer.spawn();\r\n            const collection = await humansCollection.create(0);\r\n            const replicationState = replicateCouchDB({\r\n                replicationIdentifier: randomCouchString(10),\r\n                url: server.url,\r\n                collection,\r\n                fetch: fetchWithCouchDBAuth,\r\n                live: true,\r\n                pull: {},\r\n                push: {},\r\n            });\r\n            ensureReplicationHasNoErrors(replicationState);\r\n            await replicationState.awaitInitialReplication();\r\n\r\n\r\n            // insert 3\r\n            await collection.bulkInsert([\r\n                schemaObjects.humanData('1'),\r\n                schemaObjects.humanData('2'),\r\n                schemaObjects.humanData('3')\r\n            ]);\r\n\r\n            // delete 2\r\n            await collection.findOne('1').remove();\r\n            await collection.findOne('2').remove();\r\n            await replicationState.awaitInSync();\r\n\r\n            // check server\r\n            const serverDocs = await getAllServerDocs(server.url);\r\n            assert.strictEqual(serverDocs.length, 1);\r\n            assert.strictEqual(serverDocs[0]._id, '3');\r\n\r\n            await collection.database.destroy();\r\n        });\r\n    });\r\n});\r\n"],"mappings":"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"}