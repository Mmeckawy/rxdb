{"version":3,"file":"replication-firestore.test.js","names":["assert","randomCouchString","ensureNotFalsy","createRxDatabase","firebase","schemaObjects","humansCollection","ensureReplicationHasNoErrors","ensureCollectionsHaveEqualState","humanSchemaLiteral","getFirestore","collection","getFirestoreCollection","connectFirestoreEmulator","getDocs","query","doc","DocRef","setDoc","serverTimestamp","where","orderBy","limit","getDoc","replicateFirestore","config","wrappedValidateZSchemaStorage","describe","timeout","batchSize","getAllDocsOfFirestore","firestore","result","docs","map","d","docData","data","id","projectId","app","initializeApp","databaseURL","database","getFirestoreState","useCollection","syncOnce","firestoreState","options","replicationState","replicationIdentifier","live","pull","push","awaitInitialReplication","syncFirestore","makeFirestoreHumanDocument","human","firestoreHuman","passportId","it","docsOnServer","olderDoc","find","queryTimestamp","toDate","newerQuery","queryResult","strictEqual","length","createHumanWithTimestamp","undefined","insert","humanWithTimestampData","awaitInSync","findOne","exec","incrementalPatch","age","serverDoc","primary","getLatest","remove","ok","_deleted","destroy","collectionA","collectionB","replicationStateA","replicationStateB","name","bulkInsert","Array","fill","Promise","all","c1","create","c2","doc1","doc2","firstName","h1","humanData","h2","filter","allLocalDocs","db","storage","getStorage","eventReduce","ignoreDuplicate","collections","addCollections","mycollection","schema","lastName","myDocument","selector","docRef","docSnap"],"sources":["../test/replication-firestore.test.ts"],"sourcesContent":["/**\r\n * this test checks the integration with firestore\r\n * You need a running firebase backend\r\n */\r\nimport assert from 'assert';\r\n\r\nimport {\r\n    randomCouchString,\r\n    RxCollection,\r\n    ensureNotFalsy,\r\n    WithDeleted,\r\n    createRxDatabase\r\n} from '../plugins/core/index.mjs';\r\n\r\nimport * as firebase from 'firebase/app';\r\n\r\nimport {\r\n    schemaObjects,\r\n    humansCollection,\r\n    ensureReplicationHasNoErrors,\r\n    HumanDocumentType,\r\n    ensureCollectionsHaveEqualState,\r\n    HumanWithTimestampDocumentType,\r\n    humanSchemaLiteral\r\n} from '../plugins/test-utils/index.mjs';\r\n\r\n\r\nimport {\r\n    CollectionReference,\r\n    getFirestore,\r\n    collection as getFirestoreCollection,\r\n    connectFirestoreEmulator,\r\n    getDocs,\r\n    query,\r\n    doc as DocRef,\r\n    setDoc,\r\n    serverTimestamp,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    getDoc\r\n} from 'firebase/firestore';\r\nimport {\r\n    FirestoreOptions,\r\n    replicateFirestore,\r\n    RxFirestoreReplicationState,\r\n    SyncOptionsFirestore\r\n} from '../plugins/replication-firestore/index.mjs';\r\nimport config from './unit/config.ts';\r\nimport { wrappedValidateZSchemaStorage } from '../plugins/validate-z-schema/index.mjs';\r\n\r\n\r\n/**\r\n * The tests for the firestore replication plugin\r\n * do not run in the normal test suite\r\n * because it is too slow to setup the firestore backend emulators.\r\n */\r\ndescribe('replication-firestore.test.ts', function () {\r\n    this.timeout(1000 * 20);\r\n    /**\r\n     * Use a low batchSize in all tests\r\n     * to make it easier to test boundaries.\r\n     */\r\n    const batchSize = 5;\r\n    type TestDocType = HumanWithTimestampDocumentType;\r\n    async function getAllDocsOfFirestore(firestore: FirestoreOptions<TestDocType>): Promise<TestDocType[]> {\r\n        const result = await getDocs(query(firestore.collection));\r\n        return result.docs.map(d => {\r\n            const docData = d.data();\r\n            (docData as any).id = d.id;\r\n            return docData;\r\n        }) as any;\r\n    }\r\n    const projectId = randomCouchString(10);\r\n    const app = firebase.initializeApp({\r\n        projectId,\r\n        databaseURL: 'http://localhost:8080?ns=' + projectId\r\n    });\r\n    const database = getFirestore(app);\r\n    connectFirestoreEmulator(database, 'localhost', 8080);\r\n\r\n    function getFirestoreState(): FirestoreOptions<TestDocType> {\r\n        const useCollection: CollectionReference<TestDocType> = getFirestoreCollection(database, randomCouchString(10)) as any;\r\n        return {\r\n            projectId,\r\n            collection: useCollection,\r\n            database\r\n        };\r\n    }\r\n    async function syncOnce(collection: RxCollection, firestoreState: FirestoreOptions<any>, options?: Pick<SyncOptionsFirestore<any>, 'pull' | 'push'>) {\r\n        const replicationState = replicateFirestore({\r\n            replicationIdentifier: firestoreState.projectId,\r\n            collection,\r\n            firestore: firestoreState,\r\n            live: false,\r\n            pull: options?.pull ?? {},\r\n            push: options?.push ?? {},\r\n        });\r\n        ensureReplicationHasNoErrors(replicationState);\r\n        await replicationState.awaitInitialReplication();\r\n    }\r\n    function syncFirestore<RxDocType = TestDocType>(\r\n        collection: RxCollection<RxDocType>,\r\n        firestoreState: FirestoreOptions<RxDocType>\r\n    ): RxFirestoreReplicationState<RxDocType> {\r\n        const replicationState = replicateFirestore({\r\n            replicationIdentifier: randomCouchString(10),\r\n            collection,\r\n            firestore: firestoreState,\r\n            pull: {\r\n                batchSize\r\n            },\r\n            push: {\r\n                batchSize\r\n            }\r\n        });\r\n        ensureReplicationHasNoErrors(replicationState);\r\n        return replicationState;\r\n    }\r\n\r\n    function makeFirestoreHumanDocument(human: HumanDocumentType) {\r\n        const firestoreHuman: any = { ...human };\r\n        firestoreHuman.id = firestoreHuman.passportId;\r\n        delete firestoreHuman.passportId;\r\n\r\n        firestoreHuman.serverTimestamp = serverTimestamp();\r\n\r\n        return firestoreHuman as any;\r\n    }\r\n\r\n    describe('preconditions', () => {\r\n        it('query sorted by server timestamp', async () => {\r\n            const firestoreState = await getFirestoreState();\r\n\r\n            // it should be able to query sorted by serverTimestamp\r\n            await setDoc(DocRef(firestoreState.collection, 'older'), {\r\n                id: 'older',\r\n                serverTimestamp: serverTimestamp()\r\n            } as any);\r\n            await setDoc(DocRef(firestoreState.collection, 'younger'), {\r\n                id: 'younger',\r\n                serverTimestamp: serverTimestamp()\r\n            } as any);\r\n            const docsOnServer = await getAllDocsOfFirestore(firestoreState);\r\n            const olderDoc = ensureNotFalsy(docsOnServer.find(d => d.id === 'older'));\r\n            const queryTimestamp = (olderDoc as any).serverTimestamp.toDate();\r\n            const newerQuery = query(firestoreState.collection,\r\n                where('serverTimestamp', '>', queryTimestamp),\r\n                orderBy('serverTimestamp', 'asc'),\r\n                limit(10)\r\n            );\r\n            const queryResult = await getDocs<TestDocType, any>(newerQuery as any);\r\n            assert.strictEqual(queryResult.docs.length, 1);\r\n            assert.strictEqual(\r\n                ensureNotFalsy(queryResult.docs[0]).data().id,\r\n                'younger'\r\n            );\r\n        });\r\n    });\r\n    describe('live replication', () => {\r\n        it('push replication to client-server', async () => {\r\n            const collection = await humansCollection.createHumanWithTimestamp(2, undefined, false);\r\n\r\n            const firestoreState = await getFirestoreState();\r\n\r\n            const replicationState = syncFirestore(collection, firestoreState);\r\n            ensureReplicationHasNoErrors(replicationState);\r\n            await replicationState.awaitInitialReplication();\r\n\r\n            let docsOnServer = await getAllDocsOfFirestore(firestoreState);\r\n            assert.strictEqual(docsOnServer.length, 2);\r\n\r\n            // insert another one\r\n            await collection.insert(schemaObjects.humanWithTimestampData());\r\n            await replicationState.awaitInSync();\r\n\r\n            docsOnServer = await getAllDocsOfFirestore(firestoreState);\r\n            assert.strictEqual(docsOnServer.length, 3);\r\n\r\n            // update one\r\n            const doc = await collection.findOne().exec(true);\r\n            await doc.incrementalPatch({ age: 100 });\r\n            await replicationState.awaitInSync();\r\n            docsOnServer = await getAllDocsOfFirestore(firestoreState);\r\n            assert.strictEqual(docsOnServer.length, 3);\r\n            const serverDoc = ensureNotFalsy(docsOnServer.find(d => d.id === doc.primary));\r\n            assert.strictEqual(serverDoc.age, 100);\r\n\r\n            // delete one\r\n            await doc.getLatest().remove();\r\n            await replicationState.awaitInSync();\r\n            docsOnServer = await getAllDocsOfFirestore(firestoreState);\r\n            // must still have 3 because there are no hard deletes\r\n            assert.strictEqual(docsOnServer.length, 3);\r\n            assert.ok(docsOnServer.find(d => (d as any)._deleted));\r\n\r\n            collection.database.destroy();\r\n        });\r\n        it('two collections', async () => {\r\n            const collectionA = await humansCollection.createHumanWithTimestamp(1, undefined, false);\r\n            const collectionB = await humansCollection.createHumanWithTimestamp(1, undefined, false);\r\n\r\n            const firestoreState = await getFirestoreState();\r\n            const replicationStateA = syncFirestore(collectionA, firestoreState);\r\n\r\n            ensureReplicationHasNoErrors(replicationStateA);\r\n            await replicationStateA.awaitInitialReplication();\r\n\r\n\r\n            const replicationStateB = syncFirestore(collectionB, firestoreState);\r\n            ensureReplicationHasNoErrors(replicationStateB);\r\n            await replicationStateB.awaitInitialReplication();\r\n\r\n            await replicationStateA.awaitInSync();\r\n\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // insert one\r\n            await collectionA.insert(schemaObjects.humanWithTimestampData({ id: 'insert', name: 'InsertName' }));\r\n            await replicationStateA.awaitInSync();\r\n\r\n            await replicationStateB.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // delete one\r\n            await collectionB.findOne().remove();\r\n            await replicationStateB.awaitInSync();\r\n            await replicationStateA.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // insert many\r\n            await collectionA.bulkInsert(\r\n                new Array(10)\r\n                    .fill(0)\r\n                    .map(() => schemaObjects.humanWithTimestampData({ name: 'insert-many' }))\r\n            );\r\n            await replicationStateA.awaitInSync();\r\n\r\n            await replicationStateB.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            // insert at both collections at the same time\r\n            await Promise.all([\r\n                collectionA.insert(schemaObjects.humanWithTimestampData({ name: 'insert-parallel-A' })),\r\n                collectionB.insert(schemaObjects.humanWithTimestampData({ name: 'insert-parallel-B' }))\r\n            ]);\r\n            await replicationStateA.awaitInSync();\r\n            await replicationStateB.awaitInSync();\r\n            await replicationStateA.awaitInSync();\r\n            await replicationStateB.awaitInSync();\r\n            await ensureCollectionsHaveEqualState(collectionA, collectionB);\r\n\r\n            collectionA.database.destroy();\r\n            collectionB.database.destroy();\r\n        });\r\n    });\r\n    describe('conflict handling', () => {\r\n        it('should keep the master state as default conflict handler', async () => {\r\n            const firestoreState = await getFirestoreState();\r\n            const c1 = await humansCollection.create(1);\r\n            const c2 = await humansCollection.create(0);\r\n\r\n            await syncOnce(c1, firestoreState);\r\n            await syncOnce(c2, firestoreState);\r\n\r\n            const doc1 = await c1.findOne().exec(true);\r\n            const doc2 = await c2.findOne().exec(true);\r\n\r\n            // make update on both sides\r\n            await doc1.incrementalPatch({ firstName: 'c1' });\r\n            await doc2.incrementalPatch({ firstName: 'c2' });\r\n\r\n            await syncOnce(c2, firestoreState);\r\n\r\n            // cause conflict\r\n            await syncOnce(c1, firestoreState);\r\n\r\n            /**\r\n             * Must have kept the master state c2\r\n             */\r\n            assert.strictEqual(doc1.getLatest().firstName, 'c2');\r\n\r\n            c1.database.destroy();\r\n            c2.database.destroy();\r\n        });\r\n    });\r\n\r\n    describe('filtered replication', () => {\r\n        it('should only sync filtered documents from firestore', async () => {\r\n            const firestoreState = getFirestoreState();\r\n\r\n            const h1 = makeFirestoreHumanDocument(schemaObjects.humanData('replicated', 35, 'replicated'));\r\n            const h2 = makeFirestoreHumanDocument(schemaObjects.humanData('not replicated', 27, 'not replicated'));\r\n\r\n            await setDoc(DocRef(firestoreState.collection, 'replicated'), h1);\r\n            await setDoc(DocRef(firestoreState.collection, 'not replicated'), h2);\r\n\r\n            const collection = await humansCollection.create(0);\r\n\r\n            await syncOnce(collection, firestoreState, {\r\n                pull: {\r\n                    filter: where('firstName', '==', 'replicated')\r\n                },\r\n                push: {},\r\n            });\r\n\r\n            const allLocalDocs = await collection.find().exec();\r\n\r\n            assert.strictEqual(allLocalDocs.length, 1);\r\n            assert.strictEqual(allLocalDocs[0].passportId, 'replicated');\r\n\r\n            collection.database.destroy();\r\n        });\r\n\r\n        it('should only sync filtered documents to firestore', async () => {\r\n            const firestoreState = getFirestoreState();\r\n\r\n            const collection = await humansCollection.create(0);\r\n\r\n\r\n            await collection.insert(schemaObjects.humanData('replicated', 35, 'filtered-replication-c2s-1'));\r\n            await collection.insert(schemaObjects.humanData('not replicated', 27, 'filtered-replication-c2s-2'));\r\n\r\n            await syncOnce(collection, firestoreState, {\r\n                pull: {},\r\n                push: {\r\n                    filter(human: WithDeleted<HumanDocumentType>) {\r\n                        return human.age > 30;\r\n                    },\r\n                },\r\n            });\r\n\r\n            const docsOnServer = await getAllDocsOfFirestore(firestoreState);\r\n\r\n            assert.strictEqual(docsOnServer.length, 1);\r\n            assert.strictEqual(docsOnServer[0].id, 'replicated');\r\n\r\n            collection.database.destroy();\r\n        });\r\n    });\r\n    describe('issues', () => {\r\n        it('#4698 adding items quickly does not send them to the server', async () => {\r\n            const name = randomCouchString(10);\r\n            const db = await createRxDatabase({\r\n                name,\r\n                storage: config.storage.getStorage(),\r\n                eventReduce: true,\r\n                ignoreDuplicate: true\r\n            });\r\n\r\n            // create a collection\r\n            const collections = await db.addCollections({\r\n                mycollection: {\r\n                    schema: humanSchemaLiteral\r\n                }\r\n            });\r\n\r\n            const firestoreState = getFirestoreState();\r\n            const replicationState = replicateFirestore({\r\n                replicationIdentifier: firestoreState.projectId,\r\n                firestore: firestoreState,\r\n                collection: db.collections.mycollection,\r\n                pull: {},\r\n                push: {},\r\n                live: true,\r\n            });\r\n            ensureReplicationHasNoErrors(replicationState);\r\n\r\n            // insert a document\r\n            const doc = await collections.mycollection.insert({\r\n                passportId: 'foobar',\r\n                firstName: 'Bob',\r\n                lastName: 'Kelso',\r\n                age: 56\r\n            });\r\n            await replicationState.awaitInitialReplication();\r\n\r\n            await doc.incrementalPatch({ age: 60 });\r\n            await doc.incrementalPatch({ age: 30 });\r\n            await replicationState.awaitInSync();\r\n\r\n            // ensure correct local value\r\n            const myDocument = await collections.mycollection.findOne({ selector: { passportId: 'foobar' } }).exec();\r\n            assert.strictEqual(myDocument.age, 30);\r\n\r\n            // ensure correct remote value\r\n            const docRef = DocRef(firestoreState.collection, 'foobar');\r\n            const docSnap = ensureNotFalsy(await getDoc(docRef));\r\n\r\n            assert.strictEqual(ensureNotFalsy(docSnap.data()).age, 30);\r\n            db.destroy();\r\n        });\r\n        it('#5572 firestore replication not working with schema validation', async () => {\r\n            const collection = await humansCollection.create(0, undefined, undefined, undefined, wrappedValidateZSchemaStorage({\r\n                storage: config.storage.getStorage()\r\n            }));\r\n            const firestoreState = getFirestoreState();\r\n            const replicationState = replicateFirestore({\r\n                replicationIdentifier: firestoreState.projectId,\r\n                firestore: firestoreState,\r\n                collection,\r\n                pull: {},\r\n                push: {},\r\n                live: true,\r\n            });\r\n            ensureReplicationHasNoErrors(replicationState);\r\n            await replicationState.awaitInitialReplication();\r\n\r\n            const doc = await collection.insert(schemaObjects.humanData('foobar'));\r\n            await replicationState.awaitInSync();\r\n            await doc.incrementalPatch({ age: 30 });\r\n            await replicationState.awaitInSync();\r\n\r\n            const myDocument = await collection.findOne({ selector: { passportId: 'foobar' } }).exec(true);\r\n            assert.strictEqual(myDocument.age, 30);\r\n\r\n            const docRef = DocRef(firestoreState.collection, 'foobar');\r\n            const docSnap = ensureNotFalsy(await getDoc(docRef));\r\n            assert.strictEqual(ensureNotFalsy(docSnap.data()).age, 30);\r\n\r\n            collection.database.destroy();\r\n        });\r\n    });\r\n});\r\n"],"mappings":"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"}