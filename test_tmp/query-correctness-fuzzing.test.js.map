{"version":3,"file":"query-correctness-fuzzing.test.js","names":["randomCouchString","fillWithDefaultSettings","now","createRevision","prepareQuery","ensureNotFalsy","normalizeMangoQuery","assert","config","randomOfArray","randomQuery","getRandomChangeEvents","mingoCollectionCreator","applyChangeEvent","describe","it","storage","init","timeout","runsPerInstance","eventsAmount","queriesAmount","totalRuns","console","log","indexes","sorts","schemaPlain","primaryKey","type","version","properties","_id","maxLength","name","gender","enum","age","minimum","maximum","multipleOf","schema","storageInstance","getStorage","createStorageInstance","collectionName","databaseName","databaseInstanceToken","multiInstance","devMode","options","collection","runs","_loop","procedure","changeEvent","docs","findDocumentsById","id","previous","nextRev","operation","writeResult","bulkWrite","document","Object","assign","_deleted","_rev","_meta","lwt","_attachments","deepStrictEqual","error","doc","allStorage","query","selector","$eq","skip","sort","allCorrect","forEach","d","idx","correctDoc","documents","dir","Error","queryC","_loop2","mingoSort","map","sortPart","dirPrefix","values","keys","correctResult","_loop3","useQuery","index","preparedQuery","storageResult","cleanup","remove"],"sources":["../test/query-correctness-fuzzing.test.ts"],"sourcesContent":["import {\r\n    randomCouchString,\r\n    RxJsonSchema,\r\n    fillWithDefaultSettings,\r\n    now,\r\n    createRevision,\r\n    prepareQuery,\r\n    ensureNotFalsy,\r\n    normalizeMangoQuery\r\n} from '../plugins/core/index.mjs';\r\nimport * as assert from 'assert';\r\nimport config from './unit/config.ts';\r\nimport {\r\n    randomOfArray\r\n} from 'event-reduce-js';\r\nimport {\r\n    Human,\r\n    randomQuery,\r\n    getRandomChangeEvents,\r\n    mingoCollectionCreator,\r\n    applyChangeEvent\r\n} from 'event-reduce-js/truth-table-generator';\r\n\r\n/**\r\n * Creates random writes, indexes and queries and tests if the results are correct.\r\n */\r\ndescribe('query-correctness-fuzzing.test.ts', () => {\r\n    it('init storage', async () => {\r\n        if (config.storage.init) {\r\n            await config.storage.init();\r\n        }\r\n    });\r\n    it('run tests', async function () {\r\n        this.timeout(1000 * 1000000);\r\n\r\n        const runsPerInstance = 5;\r\n        const eventsAmount = 30;\r\n        const queriesAmount = 30;\r\n\r\n\r\n        let totalRuns = 0;\r\n        while (true) {\r\n            totalRuns++;\r\n            console.log('-----------NEW RUN #' + totalRuns);\r\n            const indexes = [\r\n                ['_id'],\r\n                ['name', 'gender', 'age'],\r\n                ['gender', 'age', 'name'],\r\n                ['age', 'name', 'gender'],\r\n                ['gender', 'age'],\r\n                ['name', 'gender']\r\n            ] as const;\r\n            const sorts = [\r\n                [{ '_id': 'asc' }],\r\n                [{ 'gender': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'name': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'age': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'gender': 'asc' }, { 'name': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'name': 'asc' }, { 'gender': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'gender': 'asc' }, { 'age': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'age': 'asc' }, { 'name': 'asc' }, { '_id': 'asc' }],\r\n                [{ 'age': 'asc' }, { 'gender': 'asc' }, { 'name': 'asc' }, { '_id': 'asc' }],\r\n            ];\r\n            const schemaPlain: RxJsonSchema<Human> = {\r\n                primaryKey: '_id',\r\n                type: 'object',\r\n                version: 0,\r\n                properties: {\r\n                    _id: {\r\n                        type: 'string',\r\n                        maxLength: 20\r\n                    },\r\n                    name: {\r\n                        type: 'string',\r\n                        maxLength: 20\r\n                    },\r\n                    gender: {\r\n                        type: 'string',\r\n                        enum: ['f', 'm', 'x'],\r\n                        maxLength: 1\r\n                    },\r\n                    age: {\r\n                        type: 'number',\r\n                        minimum: 0,\r\n                        maximum: 100,\r\n                        multipleOf: 1\r\n                    }\r\n                },\r\n                indexes\r\n            };\r\n            const schema = fillWithDefaultSettings(schemaPlain);\r\n            const storageInstance = await config.storage.getStorage().createStorageInstance({\r\n                collectionName: randomCouchString(10),\r\n                databaseName: randomCouchString(10),\r\n                databaseInstanceToken: randomCouchString(10),\r\n                multiInstance: false,\r\n                devMode: false,\r\n                options: {},\r\n                schema\r\n            });\r\n            const collection = mingoCollectionCreator();\r\n\r\n\r\n            let runs = 0;\r\n            while (runs < runsPerInstance) {\r\n                runs++;\r\n\r\n                const procedure = getRandomChangeEvents(eventsAmount);\r\n\r\n                for (const changeEvent of procedure) {\r\n                    applyChangeEvent(\r\n                        collection,\r\n                        changeEvent\r\n                    );\r\n                    const docs = await storageInstance.findDocumentsById([changeEvent.id], true);\r\n                    const previous = docs[0];\r\n                    const nextRev = createRevision(randomCouchString(10), previous);\r\n\r\n                    if (changeEvent.operation === 'DELETE') {\r\n                        const writeResult = await storageInstance.bulkWrite([{\r\n                            previous: previous,\r\n                            document: Object.assign({}, changeEvent.previous, {\r\n                                _deleted: true,\r\n                                _rev: nextRev,\r\n                                _meta: {\r\n                                    lwt: now()\r\n                                },\r\n                                _attachments: {}\r\n                            })\r\n                        }], 'randomevent-delete');\r\n                        assert.deepStrictEqual(writeResult.error, []);\r\n                    } else {\r\n                        const writeResult = await storageInstance.bulkWrite([{\r\n                            previous: previous,\r\n                            document: Object.assign({}, changeEvent.doc, {\r\n                                _deleted: false,\r\n                                _rev: nextRev,\r\n                                _meta: {\r\n                                    lwt: now()\r\n                                },\r\n                                _attachments: {}\r\n                            })\r\n                        }], 'randomevent');\r\n                        assert.deepStrictEqual(writeResult.error, []);\r\n                    }\r\n                }\r\n\r\n                // ensure all docs are equal\r\n                const allStorage = await storageInstance.query(prepareQuery(schema, { selector: { _deleted: { $eq: false } }, skip: 0, sort: [{ _id: 'asc' }] }));\r\n                const allCorrect = collection.query({ selector: {}, sort: ['_id'] });\r\n                allCorrect.forEach((d, idx) => {\r\n                    const correctDoc = allStorage.documents[idx];\r\n                    if (d._id !== correctDoc._id) {\r\n                        console.dir(allStorage);\r\n                        console.dir(allCorrect);\r\n                        throw new Error('State not equal after writes');\r\n                    }\r\n                });\r\n\r\n\r\n                let queryC = 0;\r\n                while (queryC < queriesAmount) {\r\n                    queryC++;\r\n                    const query = randomQuery();\r\n                    const sort = randomOfArray(sorts);\r\n                    const mingoSort = sort.map(sortPart => {\r\n                        const dirPrefix = Object.values(sortPart)[0] === 'asc' ? '' : '-';\r\n                        return dirPrefix + Object.keys(sortPart)[0];\r\n                    });\r\n                    query.sort = mingoSort;\r\n                    const correctResult = collection.query(query);\r\n                    query.sort = sort as any;\r\n                    query.selector._deleted = { $eq: false };\r\n                    // must have the same result for all indexes\r\n                    for (const index of ensureNotFalsy(schema.indexes)) {\r\n                        const useQuery = normalizeMangoQuery(schema, query as any);\r\n                        useQuery.index = index as any;\r\n                        const preparedQuery = prepareQuery(schema, useQuery);\r\n                        const storageResult = await storageInstance.query(preparedQuery);\r\n\r\n                        storageResult.documents.forEach((d, idx) => {\r\n                            const correctDoc = correctResult[idx];\r\n                            if (d._id !== correctDoc._id) {\r\n                                console.dir(preparedQuery);\r\n                                console.dir(correctResult);\r\n                                console.dir(storageResult);\r\n                                throw new Error('WRONG QUERY RESULT!');\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n\r\n                // run cleanup after each run\r\n                await storageInstance.cleanup(0);\r\n            }\r\n\r\n\r\n            await storageInstance.remove();\r\n        }\r\n\r\n\r\n\r\n    });\r\n});\r\n"],"mappings":"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"}