{"version":3,"file":"graphql-server.js","names":["PubSub","buildSchema","execute","subscribe","createServer","ws","useServer","express","cors","graphqlHTTP","GRAPHQL_PATH","GRAPHQL_SUBSCRIPTION_PATH","ensureNotFalsy","lastOfArray","nextPort","graphQLRequest","sortByUpdatedAtAndPrimary","a","b","updatedAt","id","spawn","documents","portNumber","port","app","use","schema","pubsub","root","info","collectionFeedForRxDBReplication","args","result","feedForRxDBReplication","collection","count","length","lastId","checkpoint","minUpdatedAt","sortedDocuments","sort","filteredByMinUpdatedAtAndId","filter","doc","limited","limit","slice","last","ret","getAll","writeHumans","rows","writeRows","conflicts","storedDocs","map","row","newDocumentState","previousDoc","find","d","assumedMasterState","deleted","push","publish","humanChanged","writeHumansFail","_args","Error","asyncIterator","reqHeaderName","reqHeaderValue","req","res","next","header","toLowerCase","status","json","rootValue","graphiql","httpUrl","clientState","headers","credentials","undefined","retServer","Promise","server","listen","wsPort","wss","wsServer","Server","path","websocketUrl","subServer","onConnect","ctx","connectionParams","roots","subscription","url","http","setDocument","previous","fetch","query","operationName","variables","data","overwriteDocuments","docs","getDocuments","requireHeader","name","value","close","now","dispose","resolve","res2","setTimeout"],"sources":["../../test/helper/graphql-server.ts"],"sourcesContent":["/**\r\n * spawns a graphql-server\r\n * that can be used in tests and examples\r\n * @link https://graphql.org/graphql-js/running-an-express-graphql-server/\r\n */\r\n\r\nimport { PubSub } from 'graphql-subscriptions';\r\nimport {\r\n    buildSchema,\r\n    execute,\r\n    subscribe\r\n} from 'graphql';\r\nimport { createServer } from 'node:http';\r\nimport ws from 'ws';\r\nimport { useServer } from 'graphql-ws/lib/use/ws';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\nimport express from 'express';\r\n// we need cors because this server is also used in browser-tests\r\nimport cors from 'cors';\r\nimport { graphqlHTTP } from 'express-graphql';\r\n\r\nimport {\r\n    GRAPHQL_PATH,\r\n    GRAPHQL_SUBSCRIPTION_PATH\r\n} from './graphql-config.ts';\r\nimport { ensureNotFalsy, lastOfArray } from 'event-reduce-js';\r\nimport { RxReplicationWriteToMasterRow } from '../../plugins/core/index.mjs';\r\nimport {\r\n    HumanWithTimestampDocumentType,\r\n    nextPort\r\n} from '../../plugins/test-utils/index.mjs';\r\nimport { GraphQLServerUrl, RxGraphQLReplicationClientState } from '../../plugins/core/index.mjs';\r\n\r\nimport {\r\n    graphQLRequest\r\n} from '../../plugins/replication-graphql/index.mjs';\r\n\r\nfunction sortByUpdatedAtAndPrimary(\r\n    a: any,\r\n    b: any\r\n): 0 | 1 | -1 {\r\n    if (a.updatedAt > b.updatedAt) return 1;\r\n    if (a.updatedAt < b.updatedAt) return -1;\r\n\r\n    if (a.updatedAt === b.updatedAt) {\r\n        if (a.id > b.id) return 1;\r\n        if (a.id < b.id) return -1;\r\n        else return 0;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport interface GraphqlServer<T> {\r\n    port: number;\r\n    wsPort: number;\r\n    subServer: any;\r\n    url: GraphQLServerUrl;\r\n    setDocument(doc: T): Promise<{ data: any; }>;\r\n    overwriteDocuments(docs: T[]): void;\r\n    getDocuments(): T[];\r\n    requireHeader(name: string, value: string): void;\r\n    close(now?: boolean): Promise<void>;\r\n}\r\n\r\nexport interface GraphQLServerModule {\r\n    spawn<T = HumanWithTimestampDocumentType>(docs?: T[]): Promise<GraphqlServer<T>>;\r\n}\r\n\r\ndeclare type Human = {\r\n    id: string;\r\n    name: string;\r\n    age: number;\r\n    updatedAt: number;\r\n    deleted: boolean;\r\n};\r\n\r\nexport async function spawn(\r\n    documents: Human[] = [],\r\n    portNumber?: number\r\n): Promise<GraphqlServer<Human>> {\r\n    const port = portNumber ? portNumber : await nextPort();\r\n    const app = express();\r\n    app.use(cors());\r\n\r\n    /**\r\n     * schema in graphql\r\n     * matches ./schemas.js#humanWithTimestamp\r\n     */\r\n    const schema = buildSchema(`\r\n        type Checkpoint {\r\n            id: String!\r\n            updatedAt: Float!\r\n        }\r\n        input CheckpointInput {\r\n            id: String!\r\n            updatedAt: Float!\r\n        }\r\n        type FeedResponse {\r\n            documents: [Human!]!\r\n            checkpoint: Checkpoint!\r\n        }\r\n        type Query {\r\n            info: Int\r\n            feedForRxDBReplication(checkpoint: CheckpointInput, limit: Int!): FeedResponse!\r\n            collectionFeedForRxDBReplication(checkpoint: CheckpointInput, limit: Int!): CollectionFeedResponse!\r\n            getAll: [Human!]!\r\n        }\r\n        type Mutation {\r\n            writeHumans(writeRows: [HumanWriteRow!]): [Human!]\r\n            writeHumansFail(writeRows: [HumanWriteRow!]): [Human!]\r\n        }\r\n        input HumanWriteRow {\r\n            assumedMasterState: HumanInput,\r\n            newDocumentState: HumanInput!\r\n        }\r\n        input HumanInput {\r\n            id: ID!,\r\n            name: String!,\r\n            age: Int!,\r\n            updatedAt: Float!,\r\n            deleted: Boolean!\r\n        }\r\n        type Human {\r\n            id: ID!,\r\n            name: String!,\r\n            age: Int!,\r\n            updatedAt: Float!,\r\n            deleted: Boolean!,\r\n            deletedAt: Float\r\n        }\r\n        input Headers {\r\n            token: String\r\n        }\r\n        type CollectionFeedResponse {\r\n            collection: FeedResponse!\r\n            count: Int!\r\n        }\r\n        type Subscription {\r\n            humanChanged(headers: Headers): FeedResponse\r\n        }\r\n        schema {\r\n            query: Query\r\n            mutation: Mutation\r\n            subscription: Subscription\r\n        }\r\n    `);\r\n\r\n    const pubsub = new PubSub();\r\n    /* pubsub.subscribe('humanChanged', data => {\r\n        console.log('pubsub received!!');\r\n        console.dir(data);\r\n    });*/\r\n\r\n    // The root provides a resolver function for each API endpoint\r\n    const root = {\r\n        info: () => 1,\r\n        collectionFeedForRxDBReplication: (args: any) => {\r\n            const result = root.feedForRxDBReplication(args);\r\n\r\n            // console.log('collection');\r\n            // console.dir(result);\r\n\r\n            return {\r\n                collection: result,\r\n                count: result.documents.length\r\n            };\r\n        },\r\n        feedForRxDBReplication: (args: any) => {\r\n            const lastId = args.checkpoint ? args.checkpoint.id : '';\r\n            const minUpdatedAt = args.checkpoint ? args.checkpoint.updatedAt : 0;\r\n\r\n            // console.log('## feedForRxDBReplication');\r\n            // console.dir(args);\r\n            // sorted by updatedAt and primary\r\n            const sortedDocuments = documents.sort(sortByUpdatedAtAndPrimary);\r\n\r\n            // only return where updatedAt >= minUpdatedAt\r\n            const filteredByMinUpdatedAtAndId = sortedDocuments.filter((doc) => {\r\n                if (doc.updatedAt < minUpdatedAt) {\r\n                    return false;\r\n                } else if (doc.updatedAt > minUpdatedAt) {\r\n                    return true;\r\n                } else if (doc.updatedAt === minUpdatedAt) {\r\n                    if (doc.id > lastId) {\r\n                        return true;\r\n                    } else return false;\r\n                }\r\n            });\r\n\r\n            // limit if requested\r\n            const limited = args.limit ? filteredByMinUpdatedAtAndId.slice(0, args.limit) : filteredByMinUpdatedAtAndId;\r\n\r\n            const last = lastOfArray(limited);\r\n            const ret = {\r\n                documents: limited,\r\n                checkpoint: last ? {\r\n                    id: last.id,\r\n                    updatedAt: last.updatedAt\r\n                } : {\r\n                    id: lastId,\r\n                    updatedAt: minUpdatedAt\r\n                }\r\n            };\r\n            return ret;\r\n        },\r\n        getAll: () => {\r\n            return documents;\r\n        },\r\n        writeHumans: (args: any) => {\r\n            const rows: RxReplicationWriteToMasterRow<Human>[] = args.writeRows;\r\n\r\n\r\n            let last: Human | undefined = null as any;\r\n            const conflicts: Human[] = [];\r\n\r\n            const storedDocs = rows.map(row => {\r\n                const doc = row.newDocumentState;\r\n                const previousDoc = documents.find((d: Human) => d.id === doc.id);\r\n                if (\r\n                    (previousDoc && !row.assumedMasterState) ||\r\n                    (\r\n                        previousDoc && row.assumedMasterState &&\r\n                        previousDoc.updatedAt > row.assumedMasterState.updatedAt &&\r\n                        row.newDocumentState.deleted === previousDoc.deleted\r\n                    )\r\n                ) {\r\n                    conflicts.push(previousDoc);\r\n                    return;\r\n                }\r\n\r\n                documents = documents.filter((d: Human) => d.id !== doc.id);\r\n                documents.push(doc);\r\n\r\n                last = doc;\r\n                return doc;\r\n            });\r\n\r\n            if (last) {\r\n                pubsub.publish(\r\n                    'humanChanged',\r\n                    {\r\n                        humanChanged: {\r\n                            documents: storedDocs.filter(d => !!d),\r\n                            checkpoint: {\r\n                                id: ensureNotFalsy(last).id,\r\n                                updatedAt: ensureNotFalsy(last).updatedAt\r\n                            }\r\n                        },\r\n                    }\r\n                );\r\n            }\r\n\r\n            return conflicts;\r\n        },\r\n        // used in tests\r\n        writeHumansFail: (_args: any) => {\r\n            throw new Error('writeHumansFail called');\r\n        },\r\n        humanChanged: () => pubsub.asyncIterator('humanChanged')\r\n    };\r\n\r\n    // header simulation middleware\r\n    let reqHeaderName: string = '';\r\n    let reqHeaderValue: string = '';\r\n    app.use((req: Request, res: Response, next: NextFunction) => {\r\n        if (!reqHeaderName) {\r\n            next();\r\n            return;\r\n        }\r\n        if (req.header(reqHeaderName.toLowerCase()) !== reqHeaderValue) {\r\n            res.status(200).json({\r\n                'errors': [\r\n                    {\r\n                        'extensions': {\r\n                            'code': 'UNAUTHENTICATED'\r\n                        },\r\n                        'message': 'user not authenticated'\r\n                    }\r\n                ]\r\n            });\r\n        } else {\r\n            next();\r\n        }\r\n    });\r\n\r\n    app.use(GRAPHQL_PATH, graphqlHTTP({\r\n        schema: schema,\r\n        rootValue: root,\r\n        graphiql: true,\r\n    }));\r\n\r\n    const httpUrl = 'http://localhost:' + port + GRAPHQL_PATH;\r\n    const clientState: RxGraphQLReplicationClientState = {\r\n        headers: {},\r\n        credentials: undefined\r\n    };\r\n    const retServer: Promise<GraphqlServer<Human>> = new Promise(res => {\r\n        const server = app.listen(port, function () {\r\n\r\n            const wsPort = port + 500;\r\n            const wss = createServer(server);\r\n            const wsServer = new ws.Server({\r\n                server: wss,\r\n                path: GRAPHQL_SUBSCRIPTION_PATH,\r\n            });\r\n            const websocketUrl = 'ws://localhost:' + wsPort + GRAPHQL_SUBSCRIPTION_PATH;\r\n\r\n            wss.listen(wsPort, () => {\r\n                // console.log(`GraphQL Server is now running on http://localhost:${wsPort}`);\r\n                // Set up the WebSocket for handling GraphQL subscriptions\r\n                const subServer = useServer(\r\n                    {\r\n                        onConnect: (ctx) => {\r\n                            if (reqHeaderName) { // Only check auth when required header was set\r\n                                const headers = ctx.connectionParams?.headers as Record<string, string>;\r\n                                if (headers[reqHeaderName] !== reqHeaderValue) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        },\r\n                        schema,\r\n                        execute,\r\n                        subscribe,\r\n                        roots: {\r\n                            subscription: {\r\n                                humanChanged: root.humanChanged,\r\n                            },\r\n                        },\r\n                    },\r\n                    wsServer\r\n                );\r\n\r\n                res({\r\n                    port,\r\n                    wsPort,\r\n                    subServer,\r\n                    url: {\r\n                        http: httpUrl,\r\n                        ws: websocketUrl\r\n                    },\r\n                    async setDocument(doc: Human) {\r\n\r\n                        const previous = documents.find(d => d.id === doc.id);\r\n                        const row = {\r\n                            assumedMasterState: previous ? previous : undefined,\r\n                            newDocumentState: doc\r\n                        };\r\n\r\n\r\n                        const result = await graphQLRequest(\r\n                            fetch,\r\n                            httpUrl,\r\n                            clientState,\r\n                            {\r\n\r\n                                query: `\r\n                                    mutation CreateHumans($writeRows: [HumanWriteRow!]) {\r\n                                        writeHumans(writeRows: $writeRows) { id }\r\n                                    }\r\n                                `,\r\n                                operationName: 'CreateHumans',\r\n                                variables: {\r\n                                    writeRows: [row]\r\n                                }\r\n                            }\r\n                        );\r\n                        if (result.data.writeHumans.length > 0) {\r\n                            throw new Error('setDocument() caused a conflict');\r\n                        }\r\n                        return result;\r\n                    },\r\n                    overwriteDocuments(docs: any[]) {\r\n                        documents = docs.slice();\r\n                    },\r\n                    getDocuments() {\r\n                        return documents.slice(0);\r\n                    },\r\n                    requireHeader(name: string, value: string) {\r\n                        reqHeaderName = name;\r\n                        reqHeaderValue = value;\r\n                        if (!name) {\r\n                            reqHeaderName = '';\r\n                            reqHeaderValue = '';\r\n\r\n                            clientState.headers = {};\r\n                        } else {\r\n                            clientState.headers = {\r\n                                [name]: value\r\n                            };\r\n                        }\r\n                    },\r\n                    close(now = false) {\r\n                        if (now) {\r\n                            server.close();\r\n                            subServer.dispose();\r\n                            return Promise.resolve();\r\n                        } else {\r\n                            return new Promise(res2 => {\r\n                                setTimeout(() => {\r\n                                    server.close();\r\n                                    subServer.dispose();\r\n                                    res2();\r\n                                }, 1000);\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return subServer;\r\n            });\r\n        });\r\n    });\r\n    return retServer;\r\n}\r\n"],"mappings":"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"}